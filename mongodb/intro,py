# mongo db is document based data base  

from pymongo import MongoClient
from urllib.parse import quote_plus

# Step 1: Escape username and password according to RFC 3986
username = quote_plus("aneeqahashraf")  # Replace with your MongoDB Atlas username
password = quote_plus("aneeqah")  # Replace with your MongoDB Atlas password

# Step 2: Create the connection string
connection_string = f"mongodb+srv://{username}:{password}@cluster0.goxbxot.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"

try:
    # Step 3: Connect to MongoDB Atlas
    client = MongoClient(connection_string)
    print("Successfully connected to MongoDB Atlas!")

    # Step 4: Check for existing databases and handle case sensitivity
    db_name = "myDatabase"  # Desired database name
    existing_db_names = client.list_database_names()  # Get all existing database names

    # Check if a database with the same name (case-insensitive) already exists
    matching_db = next((db for db in existing_db_names if db.lower() == db_name.lower()), None)

    if matching_db:
        print(f"Database '{matching_db}' already exists. Using it instead of '{db_name}'.")
        db_name = matching_db  # Use the existing database name (with correct case)
    else:
        print(f"Creating new database '{db_name}'.")

    db = client[db_name]

    # Step 5: Access or create a collection
    collection_name = "myCollection"
    if collection_name in db.list_collection_names():
        print(f"Collection '{collection_name}' already exists.")
    else:
        print(f"Creating new collection '{collection_name}'.")

    collection = db[collection_name]



    # Step 6: Perform operations (e.g., insert a document)
    document = {"name": "John Doe", "age": 30}
    collection.insert_one(document)
    print("Document inserted successfully!")
    data2= {"mail_id":"johndoea@gmail.com","class": 12,"section": "A"}
    # large number of data:
    data3 = [
        {"mail_id": "johndoea@gmail.com", "class": 1, "section": "A"},
        {"mail_id": "johndoea@gmail.com", "class": 2,"section": "B"},
        {"mail_id": "johndoea@gmail.com", "class": 3,"section": "C"},
        {"mail_id": "johndoea@gmail.com", "class": 4,"section": "D"},
        {"mail_id": "johndoea@gmail.com", "class": 5,"section": "E"},
        {"mail_id": "johndoea@gmail.com", "class": 6,"section": "F"},
        {"mail_id": "johndoea@gmail.com", "class": 7,"section": "G"},
        {"mail_id": "johndoea@gmail.com", "class": 8,"section": "H"},
        {"mail_id": "johndoea@gmail.com", "class": 9,"section": "I"},
        {"mail_id": "johndoea@gmail.com", "class": 11,"section": "J"},
        {"mail_id": "johndoea@gmail.com", "class": 12,"section": "K"},
        {"mail_id": "johndoea@gmail.com", "class": 13,"section": "L"},
        {"mail_id": "johndoea@gmail.com", "class": 14,"section": "M"},
        {"mail_id": "johndoea@gmail.com", "class": 15,"section": "N"},
        {"mail_id": "johndoea@gmail.com", "class": 16,"section": "O"},
        {"mail_id": "johndoea@gmail.com", "class": 17,"section": "P"},
        {"mail_id": "johndoea@gmail.com", "class": 18,"section": "Q"},

    ]
    
    data4 = [
        {"company ": "ABC", "address": "123 Main St"},
        {"company ": "ABC", "address": "456 Elm St"},
        {"company ": "ABC", "address": "789 Oak St"},
    ]
    
    collection.insert_one(data2)
    collection.insert_many(data3) #takes data in the form of the list
    collection.insert_many(data4) #takes data in the form of the list

    # filter data:
    # finding a document 
    print(collection.find_one())
    # finding all documents
    for i in collection.find():
        print(i)
        print("------------------------------")
#   extracting a specific record 
# finding a document with a specific field
    for i in collection.find({"name":  "John Doe"}):
        print(i)
    print("----------------------------------")
    for i in collection.find({"address": "123 Main St"}):
        print(i)
    print("----------------------------------")
    for i in collection.find({"class": {"$gte":4}}):
    # here $gte refers to greater than or equal to / a reserved word in mongo db
        print(i)
    # update values:
    collection.update_many({"company name ": "ABC"}, {"$set": {"company name": "XYZ"}})





except Exception as e:
    print(f"An error occurred: {e}")

finally:
    # Step 7: Close the client connection
    if 'client' in locals():
        client.close()
        print("Client connection closed.")